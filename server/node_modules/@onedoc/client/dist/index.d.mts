interface PathString {
    path: string;
    content: string;
}
interface PathBuffer {
    path: string;
    content: Buffer;
}
interface DocumentInput {
    html: string;
    title?: string;
    test?: boolean;
    assets?: PathString[] | PathBuffer[];
    save?: boolean;
    /**
     * Number of seconds to cache the file in the CDN for.
     */
    expiresIn?: number;
}
declare class Onedoc {
    private apiKey;
    private endpoint;
    constructor(apiKey: string);
    private buildUrl;
    render(document: DocumentInput): Promise<{
        file: any;
        error: string;
        info: {
            status: number;
        };
        link?: undefined;
    } | {
        file: any;
        link: any;
        error: string;
        info: {
            status?: undefined;
        };
    } | {
        file: ArrayBuffer;
        link: any;
        error: any;
        info: {
            status?: undefined;
        };
    } | {
        file: any;
        link: any;
        error: any;
        info: {
            status?: undefined;
        };
    }>;
}

declare class HtmlBuilder {
    private title?;
    private start;
    private middle;
    private end;
    private watermark;
    constructor(title?: string);
    build(document: string, styleSheets?: string[], dev?: boolean): string;
}

export { HtmlBuilder, Onedoc };
