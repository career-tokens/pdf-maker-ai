var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  HtmlBuilder: () => HtmlBuilder,
  Onedoc: () => Onedoc
});
module.exports = __toCommonJS(src_exports);

// src/htmlBuilder.ts
var HtmlBuilder = class {
  title;
  start = `<!DOCTYPE html>
                             <html  lang="en">
                                <head>
                                    <meta charset = "UTF-8">
                                    <meta name="viewport" content="width=device-width">`;
  middle = `
                                </head>
                                <body>`;
  end = `</body>
                        </html>`;
  watermark = `<div id="watermark-onedoc" > <a href="https://www.onedoclabs.com/" target="_blank"> <svg style="transform: rotate(90deg);display:inline;margin-top:30px;" width=75 xmlns="http://www.w3.org/2000/svg" x="0" y="0" enableBackground="new 0 0 46.15 9.31" version="1.1" viewBox="0 0 46.15 9.31" xmlSpace="preserve" fill="black" {...props} > <path d="M10 9.13V2.55h1.83v.91c.35-.62 1.13-1.09 2.07-1.09.71 0 1.32.24 1.81.71s.74 1.15.74 2.03v4.02h-1.88V5.6c0-.96-.5-1.5-1.28-1.5-.85 0-1.42.62-1.42 1.55v3.48H10zM23.84 6.48h-4.83c.23.83.83 1.24 1.79 1.24.74 0 1.43-.22 2.05-.64l.74 1.28c-.8.61-1.76.91-2.88.91-1.16 0-2.05-.34-2.67-1-.61-.66-.92-1.47-.92-2.45 0-1 .32-1.81.96-2.46.64-.66 1.48-.98 2.51-.98.97 0 1.76.3 2.39.89.62.59.94 1.39.94 2.41-.01.23-.04.5-.08.8zM19 5.13h3.09c-.18-.76-.73-1.22-1.51-1.22-.76 0-1.38.46-1.58 1.22zM29.43 0h1.88v9.13h-1.82v-.71c-.52.59-1.16.88-1.96.88-.92 0-1.69-.32-2.31-.98-.61-.66-.92-1.47-.92-2.47 0-.98.31-1.8.92-2.46.62-.66 1.39-1 2.31-1 .74 0 1.38.26 1.89.8V0zm-.39 4.6c-.31-.34-.71-.5-1.2-.5s-.89.17-1.21.5c-.31.34-.47.74-.47 1.22 0 .49.16.91.47 1.25.32.34.72.5 1.21.5s.89-.17 1.2-.5c.32-.34.48-.76.48-1.25 0-.47-.15-.88-.48-1.22zM33.03 8.31c-.66-.67-.98-1.5-.98-2.47s.32-1.8.98-2.46c.66-.67 1.51-1.01 2.55-1.01 1.04 0 1.91.34 2.57 1.01.66.66 1 1.49 1 2.46s-.34 1.8-1 2.47c-.66.66-1.52 1-2.57 1-1.04 0-1.89-.34-2.55-1zm3.74-3.68c-.32-.34-.72-.5-1.19-.5s-.86.17-1.19.5c-.32.32-.48.73-.48 1.2 0 .49.16.9.48 1.24.32.32.72.49 1.19.49s.86-.17 1.19-.49c.32-.34.49-.74.49-1.24 0-.47-.17-.88-.49-1.2zM40.5 8.31c-.65-.65-.97-1.47-.97-2.48s.32-1.83.98-2.47c.66-.65 1.5-.97 2.54-.97 1.36 0 2.55.67 3.09 1.87l-1.5.8c-.38-.62-.9-.94-1.56-.94-.49 0-.89.17-1.21.49-.32.32-.48.73-.48 1.21 0 .49.16.91.47 1.24.32.32.72.48 1.2.48.66 0 1.27-.38 1.55-.92l1.52.9c-.58 1.07-1.74 1.75-3.12 1.75-1.02 0-1.86-.32-2.51-.96zM9.26 4.7c0-1.29-.44-2.36-1.34-3.25C7.03.55 5.94.1 4.63.1c-1.3 0-2.39.45-3.29 1.35C.45 2.34 0 3.43 0 4.71c0 .37.05.72.12 1.05l4.3-3.39h2.22v6.46c.47-.22.9-.5 1.29-.88.89-.89 1.33-1.97 1.33-3.25z"></path> <path d="M1.49 8.09c.62.56 1.34.94 2.17 1.1v-2.8l-2.17 1.7z"></path> </svg> <a /> </div>`;
  constructor(title) {
    this.title = title;
  }
  build(document, styleSheets, dev = true) {
    if (styleSheets) {
      styleSheets.forEach((path) => {
        this.start += `<link rel = "stylesheet" href=${path} />`;
      });
    }
    if (this.title) {
      this.start += `<title>${this.title}</title>`;
    }
    this.middle += document;
    if (dev == true) {
      this.start += `<style>
                      @page {

                        @left-middle {
                          content: flow(watermark);
                        }
                      }
                      #watermark-onedoc { -prince-flow: static(watermark, start) }

                    </style>`;
      this.middle += this.watermark;
    }
    return this.start + this.middle + this.end;
  }
};

// src/client.ts
var DEFAULT_FILE_OPTIONS = {
  cacheControl: "3600",
  contentType: "text/plain;charset=UTF-8",
  upsert: false
};
async function uploadToSignedUrl(urlToFS, path, token, fileBody, fileOptions) {
  const url = new URL(urlToFS + `/object/upload/sign/${path}`);
  url.searchParams.set("token", token);
  try {
    let body;
    const options = { upsert: DEFAULT_FILE_OPTIONS.upsert, ...fileOptions };
    const headers = {
      ...{ "x-upsert": String(options.upsert) }
    };
    if (typeof Blob !== "undefined" && fileBody instanceof Blob) {
      body = new FormData();
      body.append("cacheControl", options.cacheControl);
      body.append("", fileBody);
    } else if (typeof FormData !== "undefined" && fileBody instanceof FormData) {
      body = fileBody;
      body.append("cacheControl", options.cacheControl);
    } else {
      body = fileBody;
      headers["cache-control"] = `max-age=${options.cacheControl}`;
      headers["content-type"] = options.contentType;
    }
    const res = await fetch(url.toString(), {
      method: "PUT",
      body,
      headers
    });
    const data = await res.json();
    if (res.ok) {
      return {
        data: { path, fullPath: data.Key },
        error: null
      };
    } else {
      const error = data;
      return { data: null, error };
    }
  } catch (error) {
    throw error;
  }
}
var Onedoc = class {
  apiKey;
  endpoint = "https://app.onedoclabs.com";
  constructor(apiKey) {
    this.apiKey = apiKey;
  }
  buildUrl(path) {
    return `${this.endpoint}${path}`;
  }
  async render(document) {
    const assets = [
      ...document.assets || [],
      {
        path: "/index.html",
        content: document.html
      }
    ];
    const test = document.test === void 0 ? true : document.test;
    const save = document.save === void 0 ? false : document.save;
    const expiresIn = document.expiresIn ? document.expiresIn : 1;
    const information = await fetch(this.buildUrl("/api/docs/initiate"), {
      method: "POST",
      headers: {
        "x-api-Key": this.apiKey,
        "Content-Type": "application/json"
        // Set Content-Type if you are sending JSON data
      },
      body: JSON.stringify({
        assets
      })
    });
    if (information.status !== 200) {
      return {
        file: null,
        error: (await information.json()).error || "An unknown error has occurred",
        info: {
          status: information.status
        }
      };
    }
    const response = await information.json();
    const signedURLs = response.signedUrls;
    signedURLs.forEach(async (e) => {
      var _a, _b;
      const asset = (_a = document.assets) == null ? void 0 : _a.find((item) => {
        return item.path == e.path;
      });
      if (asset == null ? void 0 : asset.content) {
        await uploadToSignedUrl(e.signedUrl, e.path, e.token, asset.content);
      } else if (e.path == "/index.html") {
        let htmlBuilder = new HtmlBuilder(document.title);
        const styleSheets = (_b = document.assets) == null ? void 0 : _b.filter((asset2) => asset2.path.includes(".css")).map((asset2) => asset2.path);
        const html = htmlBuilder.build(
          document.html,
          styleSheets,
          test
        );
        await uploadToSignedUrl(e.signedUrl, e.path, e.token, html);
      }
    });
    console.log(response);
    const doc = await fetch(this.buildUrl("/api/docs/generate"), {
      method: "POST",
      headers: {
        "x-api-key": this.apiKey,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        ...response,
        title: document.title || "document",
        test,
        save,
        expiresIn
      })
    });
    if (doc.status !== 200) {
      return {
        file: null,
        link: null,
        error: (await doc.json()).error || "An unknown error has occurred",
        info: {}
      };
    }
    if (!save) {
      return {
        file: await doc.arrayBuffer(),
        link: null,
        error: null,
        info: {}
      };
    }
    {
      return {
        file: null,
        link: (await doc.json()).url_link,
        error: null,
        info: {}
      };
    }
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  HtmlBuilder,
  Onedoc
});
//# sourceMappingURL=index.js.map