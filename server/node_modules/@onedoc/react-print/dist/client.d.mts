import React from 'react';
import * as markdown_to_jsx from 'markdown-to-jsx';

interface CompileOptions {
    /**
     * Whether to use Emotion CSS.
     */
    emotion?: boolean;
}
declare const compile: (node: React.ReactElement, options?: CompileOptions) => Promise<string>;

/**
 * Returns the current page number.
 */
declare const PageNumber: ({ counterStyle, }: {
    /**
     * The style of the counter.
     */
    counterStyle?: string | undefined;
}) => React.JSX.Element;
/**
 * Returns the total number of pages.
 */
declare const PagesNumber: ({ counterStyle, }: {
    /**
     * The style of the counter.
     */
    counterStyle?: string | undefined;
}) => React.JSX.Element;
/**
 * Returns the current page's running header of level 1.
 */
declare const RunningH1: ({ before, after }: {
    before?: string | undefined;
    after?: string | undefined;
}) => React.JSX.Element;
/**
 * Returns the current page's running header of level 2.
 */
declare const RunningH2: ({ before, after }: {
    before?: string | undefined;
    after?: string | undefined;
}) => React.JSX.Element;
/**
 * Returns the current page's running header of level 3.
 */
declare const RunningH3: ({ before, after }: {
    before?: string | undefined;
    after?: string | undefined;
}) => React.JSX.Element;
/**
 * Returns the current page's running header of level 4.
 */
declare const RunningH4: ({ before, after }: {
    before?: string | undefined;
    after?: string | undefined;
}) => React.JSX.Element;
/**
 * Returns the current page's running header of level 5.
 */
declare const RunningH5: ({ before, after }: {
    before?: string | undefined;
    after?: string | undefined;
}) => React.JSX.Element;
/**
 * Returns the current page's running header of level 6.
 */
declare const RunningH6: ({ before, after }: {
    before?: string | undefined;
    after?: string | undefined;
}) => React.JSX.Element;

/**
 * Displays content in the top of all the pages.
 *
 * This component should be placed as early as possible in the document and will apply to all subsequent pages.
 */
declare const PageTop: (props: React.HTMLProps<HTMLDivElement>) => React.JSX.Element;
/**
 * Displays content in the top of the current page.
 *
 * This component will override the content of the `PageTop` component for the current page.
 */
declare const CurrentPageTop: (props: React.HTMLProps<HTMLDivElement>) => React.JSX.Element;
/**
 * Displays content in the bottom of all the pages.
 */
declare const PageBottom: (props: React.HTMLProps<HTMLDivElement>) => React.JSX.Element;
/**
 * Forces a page break.
 */
declare const PageBreak: (props: React.HTMLProps<HTMLDivElement>) => React.JSX.Element;
/**
 * Prevents a page break. Wrap this component around content that should not be broken across pages.
 */
declare const NoBreak: (props: React.HTMLProps<HTMLDivElement>) => React.JSX.Element;
/**
 * Floats the content to the bottom of the page.
 */
declare const FloatBottom: (props: any) => React.JSX.Element;

/**
 * Creates an automatically numbered footnote. This will remove the footnote content from the document flow and place it at the bottom of the page.
 */
declare const Footnote: ({ children, ...props }: {
    /**
     * The text to display in the footnote. This can be rich text.
     */
    children: React.ReactNode;
}) => React.JSX.Element;

declare const CSS: ({ children }: {
    children: string;
}) => React.JSX.Element;

declare const Markdown: React.FC<{
    [key: string]: any;
    children: string;
    options?: Partial<{
        createElement: (tag: string | React.ComponentClass<{}, any> | React.FunctionComponent<{}>, props: JSX.IntrinsicAttributes, ...children: React.ReactChild[]) => React.ReactChild;
        disableParsingRawHTML: boolean;
        enforceAtxHeadings: boolean;
        forceBlock: boolean;
        forceInline: boolean;
        forceWrapper: boolean;
        namedCodesToUnicode: {
            [key: string]: string;
        };
        overrides: markdown_to_jsx.MarkdownToJSX.Overrides;
        renderRule: (next: () => React.ReactChild, node: markdown_to_jsx.MarkdownToJSX.ParserResult, renderChildren: markdown_to_jsx.MarkdownToJSX.RuleOutput, state: markdown_to_jsx.MarkdownToJSX.State) => React.ReactChild;
        slugify: (source: string) => string;
        wrapper: React.ElementType<any, keyof React.JSX.IntrinsicElements> | null;
    }> | undefined;
}>;

declare const Latex: ({ children }: {
    children: string;
}) => React.JSX.Element;

export { CSS, type CompileOptions, CurrentPageTop, FloatBottom, Footnote, Latex, Markdown, NoBreak, PageBottom, PageBreak, PageNumber, PageTop, PagesNumber, RunningH1, RunningH2, RunningH3, RunningH4, RunningH5, RunningH6, compile };
